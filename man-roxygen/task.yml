status:
  short: >-
    Returns a scalar character indicating the task status.

  params:
    follow_redirect: &follow_redirect >-
      should we follow redirects to get the status of any requeued task?

  value: |
    Scalar character.  Possible values are
    \describe{
    \item{\code{PENDING}}{queued, but not run by a worker}
    \item{\code{RUNNING}}{being run on a worker, but not complete}
    \item{\code{COMPLETE}}{task completed successfully}
    \item{\code{ERROR}}{task completed with an error}
    \item{\code{ORPHAN}}{task orphaned due to loss of worker}
    \item{\code{REDIRECT}}{orphaned task has been redirected}
    \item{\code{MISSING}}{task not known (deleted, or never existed)}
    }

result:
  short: >-
    Fetch the result of a task, so long as it has completed.

  params:
    follow_redirect: *follow_redirect

    sanitise: >-

      If the task is not yet complete or is missing, return an
      \code{UnfetchabmeTask} object rather than throwing an error.

wait:
  short: >-
    Like \code{result}, but will wait until the task is complete.  In
    order to preserve the \code{key_complete} for anything that might
    be listening for it (and to avoid collision with anything else
    writing to that key), this function repeatedly polls the database.
    Over a slow connection you may want to increase the \code{every}
    parameter.

  params:
    timeout: >-
      Length of time, in seconds, to wait.  A value of zero will not
      wait.  Infinite times are possible and can be escaped by
      pressing Ctrl-C or Escape (depending on platform).

    every: How often, in seconds, to poll for results

expr:
  short: returns the expression stored in the task
  args:
    locals: >-
      Logical, indicating if the local variables associated with the
      expression should also be retuned.  If \code{TRUE}, then local
      variables used in the expression will be returned in a
      \emph{attribute} of the expression \code{envir}.
  value: >-
    A quoted expression (a language object).  Turn this into a string
    with deparse.  If \code{locals} was \code{TRUE} there will be an
    environment attribute with local variables included.

envir:
  short: returns the environment identifier for the task

times:
  short: returns a summar of times associated with this task.
  args:
    unit_elapsed: >-
      Unit to use in computing elapsed times.  The default is to use
      "secs".  This is passed through to \code{\link{difftime}} so the
      units there are available and are "auto", "secs", "mins",
      "hours", "days", "weeks".
  value: |
    A one row \code{data.frame} with columns
    \describe{
    \item{\code{submitted}}{Time the task was submitted}
    \item{\code{started}}{Time the task was started, or \code{NA} if waiting}
    \item{\code{finished}}{Time the task was completed, or \code{NA}
    if waiting or running}
    \item{\code{waiting}}{Elapsed time spent waiting}
    \item{\code{running}}{Elapsed time spent running, or \code{NA} if waiting}
    \item{\code{idle}}{Elapsed time since finished, or \code{NA}
    if waiting or running}
    }
